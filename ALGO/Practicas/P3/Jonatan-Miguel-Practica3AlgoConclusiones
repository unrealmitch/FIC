Universidad de A Coruña
Algoritmos Curso 2012/2013

3º Práctica Algoritmos
Lunes 19/11/2012

*********************** ALUMNOS ***********************
Jonatan Enes Alvarez 
jonatan.enes@udc.es

Miguel Mosquera perez
miguel.mosquera.perez@udc.es

*********************** MAQUINA ***********************
Procesador :
Intel Core 2 Duo E 7300 2.66 GHz

Memoria:
3353372 KB

Sistema Operativo:
Linux 2.6.32-42-generic Ubuntu 

*********************** MEDICIONES ***********************
Lenguaje: 
C

Compilador:
gcc (Ubuntu 4.4.3-4ubuntu5.1) 4.4.3

Unidad de Tiempo:
microsegundo (us)

**********************  INTRODUCCION ***********************
Nos proponemos medir el rendimiento de dos algoritmos de 
ordenación sobre arrays de números enteros. Dichas mediciones se
realizarán sobre distintos arrays inicializados para ver la reacción
de los algoritmos en distintas situaciones de entrada de datos.

Estas situaciones de estudio serán con vectores:
     -inicialiados de forma aleatoria.
     -de forma ascendente.
     -de forma descendente.
     
El primer algoritmo será ordenación por inserción.
El segundo algoritmo sera quicksort usando un umbral fijado
a partir del cual se llamará a una ordenación por inserción.
     
En el caso de estudio del algoritmo de quicksort dicho umbral será
el centro de estudio así como los diferentes casos. Para ello 
compararemos los tres umbrales entre los tres distintos casos de 
inicilización de vectores.

*******************  VALIDACION ALGORITMOS *****************

Para asegurarnos que los algoritmos estan bien implementados antes de 
empezar las mediciones, realizamos unas pequeñas pruebas ordenando
vectores de pocos elementos, en las siguientes tablas, de 20 elementos
aleatorios entre -50 y 50.

#############################
Inicialización Aleatoria
Vector Sin Ordenar
46 -7 46 29 46 -46 24 27 14 13 -32 -38 -9 -49 7 36 -5 -5 15 -44 
Vector Ordenado por Quicksort
-49 -46 -44 -38 -32 -9 -7 -5 -5 7 13 14 15 24 27 29 36 46 46 46 
#############################
Inicialización Descendente
Vector Sin Ordenar
20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
Vector Ordenado por Quicksort
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 
#############################
Inicialización Ascendente
Vector Sin Ordenar
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
Vector Ordenado por Quicksort
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
#############################
Inicialización Aleatoria
Vector Sin Ordenar
46 -7 46 29 46 -46 24 27 14 13 -32 -38 -9 -49 7 36 -5 -5 15 -44 
Vector Ordenado por Insercion
-49 -46 -44 -38 -32 -9 -7 -5 -5 7 13 14 15 24 27 29 36 46 46 46 
#############################
Inicialización Descendente
Vector Sin Ordenar
20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
Vector Ordenado por Inserción
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 
#############################
Inicialización Ascendente
Vector Sin Ordenar
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
Vector Ordenado por Inserción
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
#############################


*******************  PRUEBAS EMPIRICAS y CONCLUSIONES ******************

Para calcular la complejidad de los algoritmos empíricamente
usaremos nuestro programa para mostrar unas tablas con datos
obtenidos al correr los algoritmos en un ordenador 
(con especificaciones indicadas). Cabe recalcar que por 
simplificar el código el formato de salida no es exactamente el 
mostrado a continuación, el orden en el que salen las tablas es 
distinto pero esto no cambia la validez de los datos o el
resultado del estudio.



     ### ORDENACION POR INSERCION ##
     Comenzamos por el algoritmo de ordenación por inserción.
     
     
     +++++++++++++++++++++++++++++++++++++++++++++++++++
     ordenación por insercion con vector ALEATORIO

            n         |T(n)(us)   |T(n)(s)    |t(n)/n^1.54 |t(n)/n^1.77 |t(n)/n^2.0   
             500      738.000000   0.001      0.051480     0.012328     0.002952 
            1000     2954.000000   0.003      0.070862     0.014468     0.002954 
            2000     9212.000000   0.009      0.075992     0.013229     0.002303 
            4000    19184.000000   0.019      0.054421     0.008078     0.001199 
            8000    66288.000000   0.066      0.064666     0.008184     0.001036 
           16000   262575.000000   0.263      0.088086     0.009505     0.001026 
           32000  1050703.000000   1.051      0.121213     0.011152     0.001026 
     +++++++++++++++++++++++++++++++++++++++++++++++++++
     No hemos sido capaces de encontrar una mejor cota ajustada para este caso, por 
     algún motivo en el caso aleatorio la ordenación por inserción se comporta
     de una forma un poco errática y reacciona muy mal al mínimo cambio en una cota
     ajustada distinta.
     La cota ajustada nos da una idea de la complejidad del algoritmo en este caso,
     que sería menor que O(n^2) pero mayor que O(n*logn).
     
   
     ordenación por insercion con vector ASCENDENTE

            n         |T(n)(us)   |T(n)(s)    |t(n)/ln(n)  |t(n)/n      |t(n)/n*ln(n) 
     *       500        3.216000   0.000      0.517490     0.006432     0.001035 
     *      1000        6.448000   0.000      0.933444     0.006448     0.000933 
     *      2000       13.401000   0.000      1.763080     0.006700     0.000882 
     *      4000       25.566000   0.000      3.082451     0.006391     0.000771 
     *      8000       50.749000   0.000      5.646811     0.006344     0.000706 
     *     16000      101.637000   0.000     10.499317     0.006352     0.000656 
     *     32000      202.515000   0.000     19.522357     0.006329     0.000610 
     *     64000      407.051000   0.000     36.781811     0.006360     0.000575 
          128000      809.000000   0.001     68.793772     0.006320     0.000537 
      +++++++++++++++++++++++++++++++++++++++++++++++++++
     Dado que en este caso el algoritmo no realiza trabajo, solamente recorre el array,
     podemos ver en la cota ajustada que su complejidad será O(n).
     
     
    
     ordenación por insercion con vector DESCENDENTE

            n         |T(n)(us)   |T(n)(s)    |t(n)/n^1.8  |t(n)/n^2    |t(n)/n^2.2   
             500      514.000000   0.001      0.007126     0.002056     0.000593 
            1000     2088.000000   0.002      0.008312     0.002088     0.000524 
            2000     8286.000000   0.008      0.009473     0.002071     0.000453 
            4000    35071.000000   0.035      0.011514     0.002192     0.000417 
            8000   132196.000000   0.132      0.012464     0.002066     0.000342 
           16000   530323.000000   0.530      0.014359     0.002072     0.000299 
           32000  2123433.000000   2.123      0.016511     0.002074     0.000260
     +++++++++++++++++++++++++++++++++++++++++++++++++++
     En este caso el algoritmo tendrá que recorrer el array muchas veces ya que cada
     vez que coja un elemento para ordenarlo este será el mas pequeño y por tanto
     lo tendrá que insertar siempre al inicio del array(recorriéndolo). 
     Este comportamiento se ve claramente en que su complejidad es O(n^2).
     
     
     
     
     ### ordenación POR QUICKSORT ##
     Estudiamos el algoritmo de ordenación por quicksort.
     
     ####### CASO ASCENDENTE ######################################################
          
               Con UMBRAL = 1 y orden ASCENDENTE
               
            n         |T(n)(us)   |T(n)(s)  |t(n)/n^0.89  |t(n)/n^1.045 |t(n)/n^1.19  
     *       500       22.148000   0.000      0.087751     0.033490     0.013601 
     *      1000       47.320000   0.000      0.101168     0.034677     0.012736 
     *      2000       98.802000   0.000      0.113985     0.035090     0.011656 
     *      4000      203.398000   0.000      0.126623     0.035010     0.010517 
     *      8000      421.313000   0.000      0.141532     0.035146     0.009548 
           16000      830.000000   0.001      0.150457     0.033556     0.008245 
           32000     1727.000000   0.002      0.168931     0.033838     0.007519 
           64000     3587.000000   0.004      0.189335     0.034062     0.006845 
          128000     7392.000000   0.007      0.210545     0.034019     0.006183 
          256000    16815.000000   0.017      0.258442     0.037505     0.006164 
          512000    35609.000000   0.036      0.295331     0.038492     0.005722 
         1024000    69022.000000   0.069      0.308902     0.036160     0.004861 
         2048000   137047.000000   0.137      0.330968     0.034796     0.004230 
     +++++++++++++++++++++++++++++++++++++++++++++++++++
               
               
               Con UMBRAL = 10 y orden ASCENDENTE

            n         |T(n)(us)   |T(n)(s)  |t(n)/n^0.93  |t(n)/n^1.065 |t(n)/n^1.200 
     *       500       14.487000   0.000      0.044765     0.019345     0.008360 
     *      1000       32.036000   0.000      0.051956     0.020447     0.008047 
     *      2000       68.640000   0.000      0.058428     0.020940     0.007505 
     *      4000      143.267000   0.000      0.064007     0.020891     0.006818 
     *      8000      300.599000   0.000      0.070488     0.020951     0.006227 
           16000      586.000000   0.001      0.072122     0.019521     0.005284 
           32000     1229.000000   0.001      0.079389     0.019569     0.004824 
           64000     2596.000000   0.003      0.088015     0.019757     0.004435 
          128000     5417.000000   0.005      0.096395     0.019705     0.004028 
          256000    12303.000000   0.012      0.114907     0.021391     0.003982 
          512000    26024.000000   0.026      0.127571     0.021627     0.003666 
         1024000    51631.000000   0.052      0.132841     0.020509     0.003166 
         2048000   105760.000000   0.106      0.142819     0.020080     0.002823 
     +++++++++++++++++++++++++++++++++++++++++++++++++++
            
            
             Con UMBRAL = 100 y orden ASCENDENTE

            n         |T(n)(us)   |T(n)(s)  |t(n)/n^0.95  |t(n)/n^1.09 |t(n)/n^1.23  
     *       500        8.005000   0.000      0.021844     0.009151     0.003834 
     *      1000       18.476000   0.000      0.026098     0.009922     0.003772 
     *      2000       42.118000   0.000      0.030796     0.010625     0.003666 
     *      4000       92.302000   0.000      0.034934     0.010939     0.003425 
     *      8000      198.293000   0.000      0.038848     0.011039     0.003137 
     *     16000      423.554000   0.000      0.042953     0.011077     0.002857 
           32000      830.000000   0.001      0.043570     0.010197     0.002386 
           64000     1770.000000   0.002      0.048095     0.010215     0.002170 
          128000     3798.000000   0.004      0.053420     0.010297     0.001985 
          256000     9111.000000   0.009      0.066334     0.011603     0.002030 
          512000    19661.000000   0.020      0.074097     0.011763     0.001867 
         1024000    39066.000000   0.039      0.076210     0.010979     0.001582 
         2048000    79899.000000   0.080      0.080682     0.010549     0.001379 
     +++++++++++++++++++++++++++++++++++++++++++++++++++
    

     UMBRAL\nºint| 256,000|  512,000| 1,024,000| 2,048,000
                1|   16815|    35609|     69022|    137047
               10|   12303|    26024|     51631|    105760
              100|    9111|    19661|     39066|     79899
 

    En este caso podemos ver una clara diferencia, siendo un UMBRAL alto muy preferible.

    Esto es debido a que el algoritmo de ordenación rapida tiene una compeljidad 
    O(n*logn) pero en este caso en concreto el algoritmo de inserción sería mas
    eficiente, ya que tiene una compeljidad O(n). 

    La complejidad lineal del algoritmo de inserción se explica al ver que el array ya 
    esta ordenado, por lo que el único trabajo que hará sera recorrerlo.
     
    Dejando aparte las cotas propias de cada umbral podemos hablar de una complejidad
    computacional del algoritmo de ordenación por quicksort con vector de numeros en 
    orden ascendente igual a O(n).


     ####### CASO DESCENDENTE ######################################################
          
               Con UMBRAL = 1 y orden DESCENDENTE

            n         |T(n)(us)   |T(n)(s)  |t(n)/n^0.95  |t(n)/n^1.05  |t(n)/n^1.15  
     *       500       23.178000   0.000      0.063249     0.033975     0.018250 
     *      1000       48.500000   0.000      0.068508     0.034335     0.017208 
     *      2000       99.470000   0.000      0.072730     0.034010     0.015904 
     *      4000      205.158000   0.000      0.077648     0.033879     0.014782 
     *      8000      428.909000   0.000      0.084029     0.034207     0.013926 
           16000      885.000000   0.001      0.089749     0.034089     0.012948 
           32000     1817.000000   0.002      0.095381     0.033802     0.011979 
           64000     3781.000000   0.004      0.102739     0.033972     0.011233 
          128000     7779.000000   0.008      0.109414     0.033756     0.010414 
          256000    16061.000000   0.016      0.116935     0.033661     0.009689 
          512000    35614.000000   0.036      0.134219     0.036049     0.009682 
         1024000    70690.000000   0.071      0.137903     0.034558     0.008660 
         2048000   143453.000000   0.143      0.144859     0.033870     0.007919
     
     +++++++++++++++++++++++++++++++++++++++++++++++++++
              
              
               Con UMBRAL = 10 y orden DESCENDENTE

            n         |T(n)(us)   |T(n)(s)  |t(n)/n^0.94  |t(n)/n^1.07 |t(n)/n^1.20  
     *       500       15.263000   0.000      0.044321     0.019758     0.008808 
     *      1000       33.514000   0.000      0.050725     0.020665     0.008418 
     *      2000       69.592000   0.000      0.054902     0.020439     0.007609 
     *      4000      145.115000   0.000      0.059673     0.020301     0.006906 
     *      8000      302.118000   0.000      0.064755     0.020131     0.006258 
           16000      633.000000   0.001      0.070718     0.020091     0.005708 
           32000     1335.000000   0.001      0.077739     0.020182     0.005240 
           64000     2778.000000   0.003      0.084319     0.020004     0.004746 
          128000     5820.000000   0.006      0.092076     0.019962     0.004328 
          256000    12189.000000   0.012      0.100513     0.019914     0.003945 
          512000    26356.000000   0.026      0.113283     0.020510     0.003713 
         1024000    55161.000000   0.055      0.123581     0.020446     0.003383 
         2048000   112067.000000   0.112      0.130866     0.019786     0.002991 
     +++++++++++++++++++++++++++++++++++++++++++++++++++
               
               
               Con UMBRAL = 100 y orden DESCENDENTE

            n         |T(n)(us)   |T(n)(s)  |t(n)/n^0.94  |t(n)/n^1.1 |t(n)/n^1.26  
     *       500        8.148000   0.000      0.023660     0.008754     0.003239 
     *      1000       20.934000   0.000      0.031685     0.010492     0.003474 
     *      2000       44.154000   0.000      0.034834     0.010324     0.003060 
     *      4000       94.619000   0.000      0.038908     0.010321     0.002738 
     *      8000      202.772000   0.000      0.043461     0.010318     0.002450 
     *     16000      430.696000   0.000      0.048117     0.010224     0.002173 
           32000      921.000000   0.001      0.053631     0.010200     0.001940 
           64000     1972.000000   0.002      0.059855     0.010188     0.001734 
          128000     4191.000000   0.004      0.066304     0.010102     0.001539 
          256000     8926.000000   0.009      0.073606     0.010037     0.001369 
          512000    19324.000000   0.019      0.083058     0.010137     0.001237 
         1024000    42275.000000   0.042      0.094711     0.010346     0.001130 
         2048000    86163.000000   0.086      0.100617     0.009837     0.000962
         

         UMBRAL\nºint| 256,000| 512,000| 1,024,000| 2,048,000
                    1|   16061|   35614|     70690|    143453
                   10|   12189|   26356|     55161|    112067
                  100|    8926|   19324|     42275|     86163
    
    En este caso podemos ver como con umbrales mas altos el algoritmo funciona mejor. 

    Esto se explica si pensamos en la implementacion de nuestro quicksort. Nuestro algoritmo, 
    al recibir un vector ordenado inversamente, usará la Mediana3, fijando así en los extremos
    el menor elemento y el mayor. Cuando después aplique por primera vez la ordenación, 
    convertirá el array ordenado inversamente en el array ya ordenado, convirtiendo así
    nuestro caso de estudio en el caso de estudio de array ordenado de forma ASCENDENTE.

    La razón de que el algoritmo invierta el orden se debe a que, dentro de la implementación de
    nuestro quicksort, cuando los punteros j e i  avancen  se van a ir encontrando siempre con
    elementos mayores o menores que el pivote y a su vez los van a ir intercambiando hasta que
    se encuentren en el centro del array.

    Esto también explica porque las cotas ajustadas de un caso y otro difieren siempre muy poco.
    
    La complejidad general del algoritmo con las características de este caso sería igual a O(n).

         
     ####### CASO ALEATORIO ######################################################
          
     +++++++++++++++++++++++++++++++++++++++++++++++++++
     Con UMBRAL = 1 y orden ALEATORIO

            n         |T(n)(us)   |T(n)(s) |t(n)/        |t(n)/           |t(n)/  
                                               ln(n)*n^0.7    ln(n)*n^1.25     n^1.25

     *       500       50.896000   0.000      0.105680     0.018547     0.021526 
     *      1000      103.071000   0.000      0.118522     0.017132     0.018329 
     *      2000      221.557000   0.000      0.142528     0.016967     0.016565 
     *      4000      474.220000   0.000      0.172096     0.016873     0.014908 
            8000     1006.000000   0.001      0.207401     0.016747     0.013296 
           16000     2148.000000   0.002      0.253081     0.016831     0.011937 
           32000     4533.000000   0.005      0.306800     0.016804     0.010591 
           64000     9506.000000   0.010      0.371241     0.016747     0.009338 
          128000    20117.000000   0.020      0.455110     0.016908     0.008309 
          256000    42115.000000   0.042      0.553856     0.016947     0.007314 
          512000    88606.000000   0.089      0.679482     0.017123     0.006470 
         1024000   184687.000000   0.185      0.828161     0.017188     0.005670 
         2048000   384485.000000   0.384      1.010676     0.017276     0.004963 
     +++++++++++++++++++++++++++++++++++++++++++++++++++


     Con UMBRAL = 10 y orden ALEATORIO

            n         |T(n)(us)   |T(n)(s) |t(n)/        |t(n)/           |t(n)/  
                                               ln(n)*n^0.7    ln(n)*n^0.99     n^1.25

     *       500       47.016000   0.000      0.097623     0.016101     0.019885 
     *      1000       84.363000   0.000      0.097010     0.013086     0.015002 
     *      2000      184.124000   0.000      0.118447     0.013068     0.013766 
     *      4000      399.024000   0.000      0.144807     0.013068     0.012544 
            8000      855.000000   0.001      0.176270     0.013010     0.011301 
           16000     1844.000000   0.002      0.217263     0.013116     0.010247 
           32000     3929.000000   0.004      0.265921     0.013130     0.009180 
           64000     8302.000000   0.008      0.324221     0.013093     0.008156 
          128000    18119.000000   0.018      0.409909     0.013539     0.007484 
          256000    40292.000000   0.040      0.529882     0.014315     0.006997 
          512000    80328.000000   0.080      0.616001     0.013611     0.005865 
         1024000   165613.000000   0.166      0.742630     0.013421     0.005084 
         2048000   346270.000000   0.346      0.910222     0.013454     0.004469 
     +++++++++++++++++++++++++++++++++++++++++++++++++++


     Con UMBRAL = 100 y orden ALEATORIO

            n         |T(n)(us)   |T(n)(s) |t(n)/        |t(n)/           |t(n)/  
                                               ln(n)*n^0.7    ln(n)*n^0.975     n^1.25

     *       500       57.592000   0.000      0.119583     0.021650     0.024358 
     *      1000      121.460000   0.000      0.139668     0.020898     0.021599 
     *      2000      256.329000   0.000      0.164897     0.020391     0.019165 
            4000      544.000000   0.001      0.197420     0.020175     0.017101 
            8000     1158.000000   0.001      0.238738     0.020164     0.015305 
           16000     2426.000000   0.002      0.285835     0.019952     0.013482 
           32000     5067.000000   0.005      0.342942     0.019784     0.011839 
           64000    11287.000000   0.011      0.440795     0.021015     0.011088 
          128000    23936.000000   0.024      0.541508     0.021336     0.009886 
          256000    47857.000000   0.048      0.629370     0.020495     0.008311 
          512000    97849.000000   0.098      0.750363     0.020194     0.007144 
         1024000   203400.000000   0.203      0.912072     0.020286     0.006244 
         2048000   418521.000000   0.419      1.100144     0.020222     0.005402 
     +++++++++++++++++++++++++++++++++++++++++++++++++++ 
     
         
     UMBRAL\nºint| 256,000| 512,000| 1,024,000| 2,048,000
                1|   42115|   88606|    184687|    384485
               10|   40292|   80328|    165613|    346270
              100|   47857|   97849|    203400|    418521


    En el último caso podemos ver como el mejor valor es el del UMBRAL 10. Ahora la 
    implementación ya no nos da ninguna ventaja según la entrada.

    Sin embargo si recordamos cual es la situación final después de que el algoritmo de
    quicksort haga su trabajo y relegue el resto al algoritmo de inserción, nos damos
    cuenta que dicha situación es el array dividido en n/UMBRAL bloques, siendo el 
    elemento más grande de un bloque menor que el más pequeño del siguiente. Esto 
    se traduce en un array casi-ordenado, trabajo que el algoritmo de inserción hará en un
    tiempo próximo a O(n*logn).

    El porque el UMBRAL=10 sea el mejor se explica pensando en la repartición de trabajo 
    entre los algoritmos: 
    
    - Si el umbral es muy grande, el algoritmo de insercion recibirá bloques
    más grandes y el array final estará "menos" casi-ordenado, por tanto la complejidad
    general aumentará y por tanto los tiempos.

    - Si el umbral por el contrario es pequeño, todo el trabajo lo hará el algoritmo de
    quicksort y aunque en la teoría esto nos llevaría a tener una compeljidad igual a 
    O(n*logn), en la práctica el árbol de recursividad será muy grande y un computador 
    perderá mucho tiempo en su getión y en su resolución pues tendrá que guardar y recuperar 
    datos de la pila así como hacer la sucesivas llamadas a la funcion.

    Por ello mediante pruebas empíricas se pueden determinar buenos umbrales, uno de ellos
    siendo un umbral de 10. Esto lo hemos podido demostrar pues la cota ajustada de dicho umbral
    es "ln(n)*n^0.99", es decir la complejidad teórica del quicksort puro sin ser realmente
    el quicksort puro.
    
